# Use postgres/example user/password credentials
version: '3.8'

# NB PGSQL clustering with swarm: https://info.crunchydata.com/blog/an-easy-recipe-for-creating-a-postgresql-cluster-with-docker-swarm

services:
  db:
    image: postgres:12-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]
    #env_file:
    #  - ./common.env
    #  - ./apps/web.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/rseadmin-pg-postgres-passwd
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 --data-checksums"
      PGDATA: '/var/lib/postgresql/data'
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_APP_USER: rseadmin
      POSTGRES_APP_DB: rseadmin
    secrets:
      # Annoyingly secret ownership within containers can only be specified using *numeric* uids/gids 
      # (see https://docs.docker.com/compose/compose-file/#long-syntax-2) 
      - source: rseadmin-pg-rseadmin-passwd  
        uid: '0'
        gid: '70'
        mode: 0640
      - source: rseadmin-pg-postgres-passwd
        uid: '0'
        gid: '70'
        mode: 0640
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./docker/db/initdb.sh:/docker-entrypoint-initdb.d/00-initdb.sh:ro
    # import existing data vs create new db?  How to allow for both?
    # unpriv user?
    # unpriv user access to rseadmin database?
    # firewall/networking?
    # mail relaying/monitoring?
    # healthcheck:
    #   test: ["CMD", "pgsql", "???", "???"]
    #   interval: 1m30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
  #backup:
  #  image: backup-service
  #  volumes:
  #    - db-data:/var/lib/backup/data:ro
  # deploy:
  #   replicas: 1
  #   placement:
  #     constraints: [node.role == manager]
  adminer:
    image: adminer
    ports:
      - 8080:8080
  webapp:
    image: rseadmin:latest
    # environment:
    # DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-changeme}
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
#  proxy:
#    image: nginx
#    volumes:
#     - ./mysite.template:/etc/nginx/conf.d/mysite.template
#    ports:
#     - "8080:80"
#    environment:
#     - NGINX_HOST=foobar.com
#     - NGINX_PORT=80
#    command: /bin/bash -c "envsubst < /etc/nginx/conf.d/mysite.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
#    depends_on:
#      - app

secrets:
  rseadmin-pg-rseadmin-passwd:
    external: true
  rseadmin-pg-postgres-passwd:
    external: true
 
volumes:
  db-data:

networks:
  overlay:

